name: Build Test & Deploy

on: [push]
jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: pre-prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install Dependencies
        run: npm install
      - name: Build Application
        run: npm run build
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.2
        with:
          branch: gh-pages
          folder: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-docker-image:
    needs: build-test
    runs-on: ubuntu-latest
    environment: pre-prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            salras/my-image:latest
            salras/my-image:${{ github.sha }}
      - name: Push Docker Image to Docker Hub
        run: docker push salras/my-image
  deploy-to-pre-prod:
    needs: build-and-push-docker-image
    permissions:
      id-token: write 
      contents: read
    runs-on: ubuntu-latest
    environment: pre-prod

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.READ_ROLE }}
          aws-region: us-east-1
      - name: Connect to EC2 instance
        run: |
            aws ssm send-command --document-name "AWS-RunShellScript" --document-version "1" --targets '[{"Key":"InstanceIds","Values":["i-0e1e938e34e31d717"]}]' --parameters '{"workingDirectory":["/home/ubuntu"],"executionTimeout":["3600"],"commands":["#! /bin/bash","docker stop react-app","docker rm react-app","","docker rmi salras/my-image:latest","docker pull salras/my-image:latest","","docker run -t -d -p 80:80 --name react-app salras/my-image:latest"]}' --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region us-east-1
  rollback:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and test
        run: |
          npm install
      - name: Manual rollback approval
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Manual rollback approval"
          file_pattern: "rollback_approval.txt"
          branch: "main"

      - name: Rollback on approval
        if: github.ref == 'refs/heads/main' && env.APPROVED_ROLLBACK == 'true'
        uses: actions/github-script@v3
        with:
          script: |
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              per_page: 2
            });

            const [previousCommit] = commits.slice(1);

            const rollbackMessage = `Rolling back commit ${previousCommit.sha}`;

            await github.rest.repos.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: rollbackMessage,
              tree: previousCommit.commit.tree.sha,
              parents: [context.sha],
              });






